`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 17.04.2025 01:15:58
// Design Name: 
// Module Name: proc
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
module pcount(input clk,stp, rst,cntrl_b,cb,input [3:0]ins, output reg[3:0] p);
always@(posedge clk , negedge rst)
if (!stp)
    begin
     if (!rst)
        p = 4'b0000;
     else if (cntrl_b&&cb)
        p = ins;
     else
        p = p+1;
   end
endmodule


module alu(input [7:0] ac,data,input wire [7:0]ins,output reg cb, output reg[7:0]a,m);

always@(*)

    case(ins[7:4])
        4'b0001 : {cb,a} = ac + data;
        4'b0010 : {cb,a} = ac - data;
        4'b0011 : {m,a}= ac * data;
        4'b0101 : a = ac & data;
        4'b0110 : a = ac ^ data;
        4'b0111 : begin cb = (ac < data)?1:0; 
                  a = ac;end
        4'b1001 : a = data;
        default: begin
                  a = ac;
                  m = m;
                  cb = cb;
                 end
   endcase
endmodule

module accum(input clk,rst,input [7:0]ins,dat,output reg [7:0]ac,ext, output reg cb);
wire [7:0]a;
wire[7:0] ac_1, ext_1;
wire cb_1;
assign ext_1 = 8'b00000000;
assign cb_1 = 1'b0;
alu a1(.ac(a),.data(dat),.ins(ins),.cb(cb_1),.a(ac_1),.m(ext_1));
always@(posedge clk or negedge rst)
begin
if(rst)
        begin
           ac <= ac_1;
           ext <= ext_1;
           cb <= cb_1;
           if (ins[7:4] == 8'd0)
           begin
            case(ins[3:0])
                4'b0010 : ac <= {1'b0,ac[7:1]};
                4'b0001 : ac <= {ac[6:0],1'b0};
                4'b0011 : ac <= {ac[0],ac[7:1]};
                4'b0100 : ac <= {ac[6:1],ac[7]};
                4'b0101 : ac <= {ac[7],ac[7:1]};
                4'b0110 : {cb,ac} <= ac+8'b00000001;
                4'b0111 : {cb,ac} <= ac-8'b00000001;
             endcase
            end
           end
else
begin
 ac <= 8'b00000000;
 cb <= 1'b0;
 ext <= 8'b00000000;
end
end
assign a = ac;
endmodule

module proc(input clk,rst,output wire [7:0]ac_fin,ext_fin,output wire[3:0]p_fin,output wire cb_fin);
reg [7:0]ins_mem[15:0];
reg [7:0]data_mem[15:0];
reg cntrl_b;
wire [7:0]ac,ext;
wire cb;
wire [3:0]p;
reg stp;
initial begin
    ins_mem[0] = 8'b10010001;
    ins_mem[1] = 8'b00000010;
    ins_mem[3] = 8'b11111111;
//    ins_mem[3] = 8'b00000011;
//    ins_mem[4] = 8'b11111111;
    data_mem[1] = 8'd156;
    data_mem[5] = 8'd10;
    data_mem[7] = 8'd234;
end

always@(posedge clk)
begin
stp = 0;
    case(ins_mem[p][7:4])
        4'b1010: data_mem[ins_mem[p][3:0]] = ac;
        4'b1111: stp = 1;
        4'b1000: cntrl_b = 1;
    endcase
end

pcount p_1(clk,stp,rst,cntrl_b,cb,ins_mem[p][3:0],p);
accum accum_1(clk,rst,ins_mem[p],data_mem[ins_mem[p][3:0]],ac,ext,cb);


assign ac_fin = ac;
assign ext_fin = ext;
assign p_fin = p;
assign cb_fin = cb;
endmodule
